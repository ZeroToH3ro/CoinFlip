/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "hello(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "start_game(pay,string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "join_game(pay)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "resolve_game(account)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "check_wins()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4IDB4NzA2YzYxNzk2NTcyNWY2MTVmNjE2MzYzNmY3NTZlNzQgMHg0NTZkNzA3NDc5IDB4NzA2YzYxNzk2NTcyNWY2MTVmNzM2OTY0NjUgMHg0ZTZmNzQyMDYzNjg2ZjczNjU2ZTIwNzk2NTc0IDB4NzA2YzYxNzk2NTcyNWY2MjVmNjE2MzYzNmY3NTZlNzQgMHg3NzYxNjc2NTcyIDB4MTUxZjdjNzUgMHg3MDZjNjE3OTY1NzI1ZjYyNWY3MzY5NjQ2NSAweDcwNmM2MTc5NjU3MjVmNjc2MTZkNjU3MzVmNzc2ZjZlIDB4NTQ2MTY5NmM3MyAweDQ4NjU2MTY0NzMgMHg2ODY1NjE2NDczIDB4NzQ2MTY5NmM3Mwp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMTIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgwMmJlY2UxMSAvLyAiaGVsbG8oc3RyaW5nKXN0cmluZyIKPT0KYm56IG1haW5fbDExCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4Mjk4ODkxM2YgLy8gInN0YXJ0X2dhbWUocGF5LHN0cmluZylzdHJpbmciCj09CmJueiBtYWluX2wxMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGM2MjdjNDJjIC8vICJqb2luX2dhbWUocGF5KXN0cmluZyIKPT0KYm56IG1haW5fbDkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhiMDRhM2UwNSAvLyAicmVzb2x2ZV9nYW1lKGFjY291bnQpc3RyaW5nIgo9PQpibnogbWFpbl9sOAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDU4NTRjYWM2IC8vICJjaGVja193aW5zKCl1aW50NjQiCj09CmJueiBtYWluX2w3CmVycgptYWluX2w3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNoZWNrd2luc2Nhc3Rlcl8xOAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiByZXNvbHZlZ2FtZWNhc3Rlcl8xNwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sOToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBqb2luZ2FtZWNhc3Rlcl8xNgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTA6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgc3RhcnRnYW1lY2FzdGVyXzE1CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb2Nhc3Rlcl8xNAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KYm56IG1haW5fbDE2CnR4biBPbkNvbXBsZXRpb24KaW50Y18xIC8vIE9wdEluCj09CmJueiBtYWluX2wxNQplcnIKbWFpbl9sMTU6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE2Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMQppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGhlbGxvCmhlbGxvXzA6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCnB1c2hieXRlcyAweDQ4NjU2YzZjNmYyYzIwIC8vICJIZWxsbywgIgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMApjb25jYXQKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gY3JlYXRlCmNyZWF0ZV8xOgpwcm90byAwIDAKYnl0ZWNfMSAvLyAicGxheWVyX2FfYWNjb3VudCIKYnl0ZWNfMiAvLyAiRW1wdHkiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gInBsYXllcl9hX3NpZGUiCmJ5dGVjIDQgLy8gIk5vdCBjaG9zZW4geWV0IgphcHBfZ2xvYmFsX3B1dApieXRlYyA1IC8vICJwbGF5ZXJfYl9hY2NvdW50IgpieXRlY18yIC8vICJFbXB0eSIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgOCAvLyAicGxheWVyX2Jfc2lkZSIKYnl0ZWMgNCAvLyAiTm90IGNob3NlbiB5ZXQiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDYgLy8gIndhZ2VyIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIG9wdF9pbgpvcHRpbl8yOgpwcm90byAwIDAKYnl0ZWNfMSAvLyAicGxheWVyX2FfYWNjb3VudCIKYXBwX2dsb2JhbF9nZXQKYnl0ZWNfMiAvLyAiRW1wdHkiCj09CmJueiBvcHRpbl8yX2w0CmJ5dGVjIDUgLy8gInBsYXllcl9iX2FjY291bnQiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjXzIgLy8gIkVtcHR5Igo9PQpibnogb3B0aW5fMl9sMwppbnRjXzAgLy8gMApyZXR1cm4Kb3B0aW5fMl9sMzoKYnl0ZWMgNSAvLyAicGxheWVyX2JfYWNjb3VudCIKdHhuIFNlbmRlcgphcHBfZ2xvYmFsX3B1dApiIG9wdGluXzJfbDUKb3B0aW5fMl9sNDoKYnl0ZWNfMSAvLyAicGxheWVyX2FfYWNjb3VudCIKdHhuIFNlbmRlcgphcHBfZ2xvYmFsX3B1dApvcHRpbl8yX2w1Ogp0eG4gU2VuZGVyCmJ5dGVjIDkgLy8gInBsYXllcl9nYW1lc193b24iCmludGNfMCAvLyAwCmFwcF9sb2NhbF9wdXQKcmV0c3ViCgovLyBzdGFydF9nYW1lCnN0YXJ0Z2FtZV8zOgpwcm90byAyIDEKYnl0ZWNfMCAvLyAiIgp0eG4gU2VuZGVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAphcHBfb3B0ZWRfaW4KLy8gdW5hdXRob3JpemVkCmFzc2VydAppbnRjXzEgLy8gcGF5CmludGNfMSAvLyBwYXkKPT0KYnl0ZWMgNiAvLyAid2FnZXIiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj09CiYmCmZyYW1lX2RpZyAtMgpndHhucyBSZWNlaXZlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwo9PQomJgpieXRlY18zIC8vICJwbGF5ZXJfYV9zaWRlIgphcHBfZ2xvYmFsX2dldApieXRlYyA0IC8vICJOb3QgY2hvc2VuIHlldCIKPT0KJiYKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmNhbGxzdWIgY2hlY2tjb3JyZWN0aW5wdXRfMTEKaW50Y18xIC8vIDEKPT0KJiYKYXNzZXJ0CmJ5dGVjXzEgLy8gInBsYXllcl9hX2FjY291bnQiCnR4biBTZW5kZXIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNiAvLyAid2FnZXIiCmZyYW1lX2RpZyAtMgpndHhucyBBbW91bnQKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBqb2luX2dhbWUKam9pbmdhbWVfNDoKcHJvdG8gMSAxCmJ5dGVjXzAgLy8gIiIKdHhuIFNlbmRlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKYXBwX29wdGVkX2luCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKaW50Y18xIC8vIHBheQppbnRjXzEgLy8gcGF5Cj09CmJ5dGVjXzEgLy8gInBsYXllcl9hX2FjY291bnQiCmFwcF9nbG9iYWxfZ2V0CnR4biBTZW5kZXIKIT0KJiYKYnl0ZWMgOCAvLyAicGxheWVyX2Jfc2lkZSIKYXBwX2dsb2JhbF9nZXQKYnl0ZWMgNCAvLyAiTm90IGNob3NlbiB5ZXQiCj09CiYmCmZyYW1lX2RpZyAtMQpndHhucyBSZWNlaXZlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwo9PQomJgpieXRlYyA2IC8vICJ3YWdlciIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudAo9PQomJgphc3NlcnQKYnl0ZWMgNSAvLyAicGxheWVyX2JfYWNjb3VudCIKdHhuIFNlbmRlcgphcHBfZ2xvYmFsX3B1dApieXRlYyA4IC8vICJwbGF5ZXJfYl9zaWRlIgpieXRlY18zIC8vICJwbGF5ZXJfYV9zaWRlIgphcHBfZ2xvYmFsX2dldApjYWxsc3ViIGxlZnRvdmVyc2lkZV8xMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHJlc29sdmVfZ2FtZQpyZXNvbHZlZ2FtZV81Ogpwcm90byAxIDEKYnl0ZWNfMCAvLyAiIgp0eG4gU2VuZGVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAphcHBfb3B0ZWRfaW4KLy8gdW5hdXRob3JpemVkCmFzc2VydApieXRlY18xIC8vICJwbGF5ZXJfYV9hY2NvdW50IgphcHBfZ2xvYmFsX2dldAp0eG4gU2VuZGVyCj09CmJ5dGVjIDUgLy8gInBsYXllcl9iX2FjY291bnQiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjXzIgLy8gIkVtcHR5IgohPQomJgphc3NlcnQKY2FsbHN1YiBkZWNpZGV3aW5uZXJfOApzdG9yZSAyCmJ5dGVjIDYgLy8gIndhZ2VyIgphcHBfZ2xvYmFsX2dldApsb2FkIDIKY2FsbHN1YiBwYXlvdXRfOQpsb2FkIDIKdHhuYXMgQWNjb3VudHMKYnl0ZWMgOSAvLyAicGxheWVyX2dhbWVzX3dvbiIKbG9hZCAyCnR4bmFzIEFjY291bnRzCmJ5dGVjIDkgLy8gInBsYXllcl9nYW1lc193b24iCmFwcF9sb2NhbF9nZXQKaW50Y18xIC8vIDEKKwphcHBfbG9jYWxfcHV0CmNhbGxzdWIgcmVzZXRnYW1lXzcKbG9hZCAyCmludGNfMCAvLyAwCj09CmJueiByZXNvbHZlZ2FtZV81X2w0CmxvYWQgMgppbnRjXzEgLy8gMQo9PQpibnogcmVzb2x2ZWdhbWVfNV9sMwplcnIKcmVzb2x2ZWdhbWVfNV9sMzoKcHVzaGJ5dGVzIDB4NTA2YzYxNzk2NTcyMjA0MjIwNzc2ZjZlMjA3NDY4NjUyMDYzNmY2OTZlNjY2YzY5NzAyZSAvLyAiUGxheWVyIEIgd29uIHRoZSBjb2luZmxpcC4iCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMApjb25jYXQKZnJhbWVfYnVyeSAwCmIgcmVzb2x2ZWdhbWVfNV9sNQpyZXNvbHZlZ2FtZV81X2w0OgpwdXNoYnl0ZXMgMHg1MDZjNjE3OTY1NzIyMDQxMjA3NzZmNmUyMDc0Njg2NTIwNjM2ZjY5NmU2NjZjNjk3MDJlIC8vICJQbGF5ZXIgQSB3b24gdGhlIGNvaW5mbGlwLiIKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmxlbgppdG9iCmV4dHJhY3QgNiAwCmZyYW1lX2RpZyAwCmNvbmNhdApmcmFtZV9idXJ5IDAKcmVzb2x2ZWdhbWVfNV9sNToKcmV0c3ViCgovLyBjaGVja193aW5zCmNoZWNrd2luc182Ogpwcm90byAwIDEKaW50Y18wIC8vIDAKdHhuIFNlbmRlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKYXBwX29wdGVkX2luCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKdHhuIFNlbmRlcgpieXRlYyA5IC8vICJwbGF5ZXJfZ2FtZXNfd29uIgphcHBfbG9jYWxfZ2V0CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIHJlc2V0X2dhbWUKcmVzZXRnYW1lXzc6CnByb3RvIDAgMApieXRlY18xIC8vICJwbGF5ZXJfYV9hY2NvdW50IgpieXRlY18yIC8vICJFbXB0eSIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNSAvLyAicGxheWVyX2JfYWNjb3VudCIKYnl0ZWNfMiAvLyAiRW1wdHkiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gInBsYXllcl9hX3NpZGUiCmJ5dGVjIDQgLy8gIk5vdCBjaG9zZW4geWV0IgphcHBfZ2xvYmFsX3B1dApieXRlYyA4IC8vICJwbGF5ZXJfYl9zaWRlIgpieXRlYyA0IC8vICJOb3QgY2hvc2VuIHlldCIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNiAvLyAid2FnZXIiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gZGVjaWRlX3dpbm5lcgpkZWNpZGV3aW5uZXJfODoKcHJvdG8gMCAxCmJ5dGVjXzMgLy8gInBsYXllcl9hX3NpZGUiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjIDEwIC8vICJUYWlscyIKPT0KYm56IGRlY2lkZXdpbm5lcl84X2wyCmludGNfMSAvLyAxCmIgZGVjaWRld2lubmVyXzhfbDMKZGVjaWRld2lubmVyXzhfbDI6CmludGNfMCAvLyAwCmRlY2lkZXdpbm5lcl84X2wzOgpyZXRzdWIKCi8vIHBheW91dApwYXlvdXRfOToKcHJvdG8gMiAwCml0eG5fYmVnaW4KaW50Y18xIC8vIHBheQppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtMgpwdXNoaW50IDIgLy8gMgoqCnR4biBGZWUKLQppdHhuX2ZpZWxkIEFtb3VudApmcmFtZV9kaWcgLTEKdHhuYXMgQWNjb3VudHMKaXR4bl9maWVsZCBSZWNlaXZlcgppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIGxlZnRvdmVyX3NpZGUKbGVmdG92ZXJzaWRlXzEwOgpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmJ5dGVjIDExIC8vICJIZWFkcyIKPT0KYm56IGxlZnRvdmVyc2lkZV8xMF9sMgpieXRlYyAxMSAvLyAiSGVhZHMiCmIgbGVmdG92ZXJzaWRlXzEwX2wzCmxlZnRvdmVyc2lkZV8xMF9sMjoKYnl0ZWMgMTAgLy8gIlRhaWxzIgpsZWZ0b3ZlcnNpZGVfMTBfbDM6CnJldHN1YgoKLy8gY2hlY2tfY29ycmVjdF9pbnB1dApjaGVja2NvcnJlY3RpbnB1dF8xMToKcHJvdG8gMSAxCmZyYW1lX2RpZyAtMQpjYWxsc3ViIHRvbG93ZXJfMTIKc3RvcmUgMApsb2FkIDAKYnl0ZWMgMTIgLy8gImhlYWRzIgo9PQpsb2FkIDAKYnl0ZWMgMTMgLy8gInRhaWxzIgo9PQp8fApibnogY2hlY2tjb3JyZWN0aW5wdXRfMTFfbDIKaW50Y18wIC8vIDAKYiBjaGVja2NvcnJlY3RpbnB1dF8xMV9sOApjaGVja2NvcnJlY3RpbnB1dF8xMV9sMjoKbG9hZCAwCmJ5dGVjIDEyIC8vICJoZWFkcyIKPT0KYm56IGNoZWNrY29ycmVjdGlucHV0XzExX2w3CmxvYWQgMApieXRlYyAxMyAvLyAidGFpbHMiCj09CmJueiBjaGVja2NvcnJlY3RpbnB1dF8xMV9sNQplcnIKY2hlY2tjb3JyZWN0aW5wdXRfMTFfbDU6CmJ5dGVjXzMgLy8gInBsYXllcl9hX3NpZGUiCmJ5dGVjIDEwIC8vICJUYWlscyIKYXBwX2dsb2JhbF9wdXQKY2hlY2tjb3JyZWN0aW5wdXRfMTFfbDY6CmludGNfMSAvLyAxCmIgY2hlY2tjb3JyZWN0aW5wdXRfMTFfbDgKY2hlY2tjb3JyZWN0aW5wdXRfMTFfbDc6CmJ5dGVjXzMgLy8gInBsYXllcl9hX3NpZGUiCmJ5dGVjIDExIC8vICJIZWFkcyIKYXBwX2dsb2JhbF9wdXQKYiBjaGVja2NvcnJlY3RpbnB1dF8xMV9sNgpjaGVja2NvcnJlY3RpbnB1dF8xMV9sODoKcmV0c3ViCgovLyB0b19sb3dlcgp0b2xvd2VyXzEyOgpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmludGNfMCAvLyAwCmZyYW1lX2RpZyAtMQpsZW4KY2FsbHN1YiBydGxfMTMKcmV0c3ViCgovLyBydGwKcnRsXzEzOgpwcm90byAzIDEKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQo+PQpibnogcnRsXzEzX2w0CmZyYW1lX2RpZyAtMwpmcmFtZV9kaWcgLTIKZ2V0Ynl0ZQpzdG9yZSAxCmxvYWQgMQpwdXNoaW50IDY1IC8vIDY1Cj49CmxvYWQgMQpwdXNoaW50IDkwIC8vIDkwCjw9CiYmCmJueiBydGxfMTNfbDMKZnJhbWVfZGlnIC0zCmZyYW1lX2RpZyAtMgppbnRjXzEgLy8gMQorCmZyYW1lX2RpZyAtMQpsb2FkIDEKY292ZXIgMwpjYWxsc3ViIHJ0bF8xMwpzd2FwCnN0b3JlIDEKYiBydGxfMTNfbDUKcnRsXzEzX2wzOgpmcmFtZV9kaWcgLTMKZnJhbWVfZGlnIC0yCmxvYWQgMQpwdXNoaW50IDMyIC8vIDMyCisKc2V0Ynl0ZQpmcmFtZV9kaWcgLTIKaW50Y18xIC8vIDEKKwpmcmFtZV9kaWcgLTEKbG9hZCAxCmNvdmVyIDMKY2FsbHN1YiBydGxfMTMKc3dhcApzdG9yZSAxCmIgcnRsXzEzX2w1CnJ0bF8xM19sNDoKZnJhbWVfZGlnIC0zCnJ0bF8xM19sNToKcmV0c3ViCgovLyBoZWxsb19jYXN0ZXIKaGVsbG9jYXN0ZXJfMTQ6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpjYWxsc3ViIGhlbGxvXzAKZnJhbWVfYnVyeSAwCmJ5dGVjIDcgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gc3RhcnRfZ2FtZV9jYXN0ZXIKc3RhcnRnYW1lY2FzdGVyXzE1Ogpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgc3RhcnRnYW1lXzMKZnJhbWVfYnVyeSAwCmJ5dGVjIDcgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gam9pbl9nYW1lX2Nhc3Rlcgpqb2luZ2FtZWNhc3Rlcl8xNjoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKZnJhbWVfZGlnIDEKY2FsbHN1YiBqb2luZ2FtZV80CmZyYW1lX2J1cnkgMApieXRlYyA3IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIHJlc29sdmVfZ2FtZV9jYXN0ZXIKcmVzb2x2ZWdhbWVjYXN0ZXJfMTc6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKY2FsbHN1YiByZXNvbHZlZ2FtZV81CmZyYW1lX2J1cnkgMApieXRlYyA3IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGNoZWNrX3dpbnNfY2FzdGVyCmNoZWNrd2luc2Nhc3Rlcl8xODoKcHJvdG8gMCAwCmludGNfMCAvLyAwCmNhbGxzdWIgY2hlY2t3aW5zXzYKZnJhbWVfYnVyeSAwCmJ5dGVjIDcgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMAppdG9iCmNvbmNhdApsb2cKcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 1
    }
  },
  "schema": {
    "global": {
      "declared": {
        "player_a_account": {
          "type": "bytes",
          "key": "player_a_account",
          "descr": "First player's account"
        },
        "player_a_side": {
          "type": "bytes",
          "key": "player_a_side",
          "descr": "First player's side of the coin"
        },
        "player_b_account": {
          "type": "bytes",
          "key": "player_b_account",
          "descr": "Second player's account"
        },
        "player_b_side": {
          "type": "bytes",
          "key": "player_b_side",
          "descr": "Second player's side of the coin"
        },
        "wager": {
          "type": "uint64",
          "key": "wager",
          "descr": "Betting amount for the coinflip"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {
        "player_games_won": {
          "type": "uint64",
          "key": "player_games_won",
          "descr": "Amount of coinflip games won"
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "coinflip",
    "methods": [
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "start_game",
        "args": [
          {
            "type": "pay",
            "name": "payment"
          },
          {
            "type": "string",
            "name": "choice"
          }
        ],
        "returns": {
          "type": "string"
        },
        "desc": "Player A initiates the game, he pays the wager he wants for the game and then chooses the side of the coin (\"Heads\" or \"Tails\")"
      },
      {
        "name": "join_game",
        "args": [
          {
            "type": "pay",
            "name": "payment"
          }
        ],
        "returns": {
          "type": "string"
        },
        "desc": "Player B joins the game, gets the side that's left (player A picks first), pays the wager and waits for the game to resolve by player A"
      },
      {
        "name": "resolve_game",
        "args": [
          {
            "type": "account",
            "name": "opp"
          }
        ],
        "returns": {
          "type": "string"
        },
        "desc": "Player A resolves the game, win counter updates and the wager pays out to the player who won"
      },
      {
        "name": "check_wins",
        "args": [],
        "returns": {
          "type": "uint64"
        },
        "desc": "Check personal number of coinflip wins"
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Coinflip smart contract.
 */
export type Coinflip = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: string
    }>
    & Record<'start_game(pay,string)string' | 'start_game', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        choice: string
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, choice: string]
      returns: string
    }>
    & Record<'join_game(pay)string' | 'join_game', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: string
    }>
    & Record<'resolve_game(account)string' | 'resolve_game', {
      argsObj: {
        opp: string | Uint8Array
      }
      argsTuple: [opp: string | Uint8Array]
      returns: string
    }>
    & Record<'check_wins()uint64' | 'check_wins', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * First player's account
       */
      playerAAccount?: BinaryState
      /**
       * First player's side of the coin
       */
      playerASide?: BinaryState
      /**
       * Second player's account
       */
      playerBAccount?: BinaryState
      /**
       * Second player's side of the coin
       */
      playerBSide?: BinaryState
      /**
       * Betting amount for the coinflip
       */
      wager?: IntegerState
    }
    local: {
      /**
       * Amount of coinflip games won
       */
      playerGamesWon?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CoinflipSig = keyof Coinflip['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CoinflipSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Coinflip smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CoinflipSig> = Coinflip['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Coinflip smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CoinflipSig> = Coinflip['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CoinflipCreateCalls = (typeof CoinflipCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CoinflipCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CoinflipDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CoinflipCreateCalls) => CoinflipCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CoinflipCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the coinflip smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the coinflip smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hello(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the start_game(pay,string)string ABI method
   *
   * Player A initiates the game, he pays the wager he wants for the game and then chooses the side of the coin ("Heads" or "Tails")
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static startGame(args: MethodArgs<'start_game(pay,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'start_game(pay,string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment, args.choice],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the join_game(pay)string ABI method
   *
   * Player B joins the game, gets the side that's left (player A picks first), pays the wager and waits for the game to resolve by player A
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static joinGame(args: MethodArgs<'join_game(pay)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'join_game(pay)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the resolve_game(account)string ABI method
   *
   * Player A resolves the game, win counter updates and the wager pays out to the player who won
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static resolveGame(args: MethodArgs<'resolve_game(account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'resolve_game(account)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.opp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the check_wins()uint64 ABI method
   *
   * Check personal number of coinflip wins
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static checkWins(args: MethodArgs<'check_wins()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'check_wins()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the coinflip smart contract
 */
export class CoinflipClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CoinflipClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Coinflip['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the coinflip smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CoinflipDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CoinflipCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the coinflip smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the coinflip smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.optIn(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the coinflip smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CoinflipCallFactory.hello(args, params))
  }

  /**
   * Calls the start_game(pay,string)string ABI method.
   *
   * Player A initiates the game, he pays the wager he wants for the game and then chooses the side of the coin ("Heads" or "Tails")
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public startGame(args: MethodArgs<'start_game(pay,string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CoinflipCallFactory.startGame(args, params))
  }

  /**
   * Calls the join_game(pay)string ABI method.
   *
   * Player B joins the game, gets the side that's left (player A picks first), pays the wager and waits for the game to resolve by player A
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public joinGame(args: MethodArgs<'join_game(pay)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CoinflipCallFactory.joinGame(args, params))
  }

  /**
   * Calls the resolve_game(account)string ABI method.
   *
   * Player A resolves the game, win counter updates and the wager pays out to the player who won
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public resolveGame(args: MethodArgs<'resolve_game(account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CoinflipCallFactory.resolveGame(args, params))
  }

  /**
   * Calls the check_wins()uint64 ABI method.
   *
   * Check personal number of coinflip wins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public checkWins(args: MethodArgs<'check_wins()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CoinflipCallFactory.checkWins(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Coinflip['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get playerAAccount() {
        return CoinflipClient.getBinaryState(state, 'player_a_account')
      },
      get playerASide() {
        return CoinflipClient.getBinaryState(state, 'player_a_side')
      },
      get playerBAccount() {
        return CoinflipClient.getBinaryState(state, 'player_b_account')
      },
      get playerBSide() {
        return CoinflipClient.getBinaryState(state, 'player_b_side')
      },
      get wager() {
        return CoinflipClient.getIntegerState(state, 'wager')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<Coinflip['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get playerGamesWon() {
        return CoinflipClient.getIntegerState(state, 'player_games_won')
      },
    }
  }

  public compose(): CoinflipComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      hello(args: MethodArgs<'hello(string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      startGame(args: MethodArgs<'start_game(pay,string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.startGame(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      joinGame(args: MethodArgs<'join_game(pay)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.joinGame(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      resolveGame(args: MethodArgs<'resolve_game(account)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.resolveGame(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      checkWins(args: MethodArgs<'check_wins()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.checkWins(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CoinflipComposer
  }
}
export type CoinflipComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(args: MethodArgs<'hello(string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CoinflipComposer<[...TReturns, MethodReturn<'hello(string)string'>]>

  /**
   * Calls the start_game(pay,string)string ABI method.
   *
   * Player A initiates the game, he pays the wager he wants for the game and then chooses the side of the coin ("Heads" or "Tails")
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startGame(args: MethodArgs<'start_game(pay,string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CoinflipComposer<[...TReturns, MethodReturn<'start_game(pay,string)string'>]>

  /**
   * Calls the join_game(pay)string ABI method.
   *
   * Player B joins the game, gets the side that's left (player A picks first), pays the wager and waits for the game to resolve by player A
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGame(args: MethodArgs<'join_game(pay)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CoinflipComposer<[...TReturns, MethodReturn<'join_game(pay)string'>]>

  /**
   * Calls the resolve_game(account)string ABI method.
   *
   * Player A resolves the game, win counter updates and the wager pays out to the player who won
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolveGame(args: MethodArgs<'resolve_game(account)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CoinflipComposer<[...TReturns, MethodReturn<'resolve_game(account)string'>]>

  /**
   * Calls the check_wins()uint64 ABI method.
   *
   * Check personal number of coinflip wins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkWins(args: MethodArgs<'check_wins()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CoinflipComposer<[...TReturns, MethodReturn<'check_wins()uint64'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the coinflip smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CoinflipComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the coinflip smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CoinflipComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CoinflipComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CoinflipComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CoinflipComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CoinflipComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CoinflipComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
