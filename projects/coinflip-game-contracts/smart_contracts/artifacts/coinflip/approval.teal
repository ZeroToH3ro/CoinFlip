#pragma version 8
intcblock 0 1
bytecblock 0x 0x456d707479 0x706c617965725f615f6163636f756e74 0x706c617965725f625f6163636f756e74 0x706c617965725f615f73696465 0x4e6f742063686f73656e20796574 0x7761676572 0x151f7c75 0x706c617965725f625f73696465 0x706c617965725f67616d65735f776f6e 0x5461696c73 0x4865616473 0x6865616473 0x7461696c73
txn NumAppArgs
intc_0 // 0
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0x02bece11 // "hello(string)string"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x2988913f // "start_game(pay,string)string"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0xc627c42c // "join_game(pay)string"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0xb04a3e05 // "resolve_game(account)string"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x5854cac6 // "check_wins()uint64"
==
bnz main_l7
err
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub checkwinscaster_18
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub resolvegamecaster_17
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub joingamecaster_16
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub startgamecaster_15
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub hellocaster_14
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l16
txn OnCompletion
intc_1 // OptIn
==
bnz main_l15
err
main_l15:
txn ApplicationID
intc_0 // 0
!=
assert
callsub optin_2
intc_1 // 1
return
main_l16:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_1
intc_1 // 1
return

// hello
hello_0:
proto 1 1
bytec_0 // ""
pushbytes 0x48656c6c6f2c20 // "Hello, "
frame_dig -1
extract 2 0
concat
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
retsub

// create
create_1:
proto 0 0
bytec_2 // "player_a_account"
bytec_1 // "Empty"
app_global_put
bytec 4 // "player_a_side"
bytec 5 // "Not chosen yet"
app_global_put
bytec_3 // "player_b_account"
bytec_1 // "Empty"
app_global_put
bytec 8 // "player_b_side"
bytec 5 // "Not chosen yet"
app_global_put
bytec 6 // "wager"
intc_0 // 0
app_global_put
retsub

// opt_in
optin_2:
proto 0 0
bytec_2 // "player_a_account"
app_global_get
bytec_1 // "Empty"
==
bnz optin_2_l4
bytec_3 // "player_b_account"
app_global_get
bytec_1 // "Empty"
==
bnz optin_2_l3
intc_0 // 0
return
optin_2_l3:
bytec_3 // "player_b_account"
txn Sender
app_global_put
b optin_2_l5
optin_2_l4:
bytec_2 // "player_a_account"
txn Sender
app_global_put
optin_2_l5:
txn Sender
bytec 9 // "player_games_won"
intc_0 // 0
app_local_put
retsub

// start_game
startgame_3:
proto 2 1
bytec_0 // ""
intc_1 // pay
intc_1 // pay
==
frame_dig -2
gtxns Receiver
global CurrentApplicationAddress
==
&&
frame_dig -1
extract 2 0
callsub checkcorrectinput_11
intc_1 // 1
==
&&
assert
bytec_2 // "player_a_account"
app_global_get
bytec_1 // "Empty"
==
bz startgame_3_l2
bytec_2 // "player_a_account"
txn Sender
app_global_put
startgame_3_l2:
bytec 6 // "wager"
frame_dig -2
gtxns Amount
app_global_put
retsub

// join_game
joingame_4:
proto 1 1
bytec_0 // ""
intc_1 // pay
intc_1 // pay
==
bytec_2 // "player_a_account"
app_global_get
txn Sender
!=
&&
bytec 8 // "player_b_side"
app_global_get
bytec 5 // "Not chosen yet"
==
&&
frame_dig -1
gtxns Receiver
global CurrentApplicationAddress
==
&&
bytec 6 // "wager"
app_global_get
frame_dig -1
gtxns Amount
==
&&
assert
bytec_3 // "player_b_account"
app_global_get
bytec_1 // "Empty"
==
bz joingame_4_l2
bytec_3 // "player_b_account"
txn Sender
app_global_put
joingame_4_l2:
bytec 8 // "player_b_side"
bytec 4 // "player_a_side"
app_global_get
callsub leftoverside_10
app_global_put
retsub

// resolve_game
resolvegame_5:
proto 1 1
bytec_0 // ""
bytec_2 // "player_a_account"
app_global_get
txn Sender
==
bytec_3 // "player_b_account"
app_global_get
bytec_1 // "Empty"
!=
&&
assert
callsub decidewinner_8
store 2
bytec 6 // "wager"
app_global_get
load 2
callsub payout_9
load 2
txnas Accounts
bytec 9 // "player_games_won"
load 2
txnas Accounts
bytec 9 // "player_games_won"
app_local_get
intc_1 // 1
+
app_local_put
callsub resetgame_7
load 2
intc_0 // 0
==
bnz resolvegame_5_l4
load 2
intc_1 // 1
==
bnz resolvegame_5_l3
err
resolvegame_5_l3:
pushbytes 0x506c61796572204220776f6e2074686520636f696e666c69702e // "Player B won the coinflip."
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
b resolvegame_5_l5
resolvegame_5_l4:
pushbytes 0x506c61796572204120776f6e2074686520636f696e666c69702e // "Player A won the coinflip."
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
resolvegame_5_l5:
retsub

// check_wins
checkwins_6:
proto 0 1
intc_0 // 0
txn Sender
bytec 9 // "player_games_won"
app_local_get
frame_bury 0
retsub

// reset_game
resetgame_7:
proto 0 0
bytec_2 // "player_a_account"
bytec_1 // "Empty"
app_global_put
bytec_3 // "player_b_account"
bytec_1 // "Empty"
app_global_put
bytec 4 // "player_a_side"
bytec 5 // "Not chosen yet"
app_global_put
bytec 8 // "player_b_side"
bytec 5 // "Not chosen yet"
app_global_put
bytec 6 // "wager"
intc_0 // 0
app_global_put
retsub

// decide_winner
decidewinner_8:
proto 0 1
bytec 4 // "player_a_side"
app_global_get
bytec 10 // "Tails"
==
bnz decidewinner_8_l2
intc_1 // 1
b decidewinner_8_l3
decidewinner_8_l2:
intc_0 // 0
decidewinner_8_l3:
retsub

// payout
payout_9:
proto 2 0
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig -2
pushint 2 // 2
*
txn Fee
-
itxn_field Amount
frame_dig -1
txnas Accounts
itxn_field Receiver
itxn_submit
retsub

// leftover_side
leftoverside_10:
proto 1 1
frame_dig -1
bytec 11 // "Heads"
==
bnz leftoverside_10_l2
bytec 11 // "Heads"
b leftoverside_10_l3
leftoverside_10_l2:
bytec 10 // "Tails"
leftoverside_10_l3:
retsub

// check_correct_input
checkcorrectinput_11:
proto 1 1
frame_dig -1
callsub tolower_12
store 0
load 0
bytec 12 // "heads"
==
load 0
bytec 13 // "tails"
==
||
bnz checkcorrectinput_11_l2
intc_0 // 0
b checkcorrectinput_11_l8
checkcorrectinput_11_l2:
load 0
bytec 12 // "heads"
==
bnz checkcorrectinput_11_l7
load 0
bytec 13 // "tails"
==
bnz checkcorrectinput_11_l5
err
checkcorrectinput_11_l5:
bytec 4 // "player_a_side"
bytec 10 // "Tails"
app_global_put
checkcorrectinput_11_l6:
intc_1 // 1
b checkcorrectinput_11_l8
checkcorrectinput_11_l7:
bytec 4 // "player_a_side"
bytec 11 // "Heads"
app_global_put
b checkcorrectinput_11_l6
checkcorrectinput_11_l8:
retsub

// to_lower
tolower_12:
proto 1 1
frame_dig -1
intc_0 // 0
frame_dig -1
len
callsub rtl_13
retsub

// rtl
rtl_13:
proto 3 1
frame_dig -2
frame_dig -1
>=
bnz rtl_13_l4
frame_dig -3
frame_dig -2
getbyte
store 1
load 1
pushint 65 // 65
>=
load 1
pushint 90 // 90
<=
&&
bnz rtl_13_l3
frame_dig -3
frame_dig -2
intc_1 // 1
+
frame_dig -1
load 1
cover 3
callsub rtl_13
swap
store 1
b rtl_13_l5
rtl_13_l3:
frame_dig -3
frame_dig -2
load 1
pushint 32 // 32
+
setbyte
frame_dig -2
intc_1 // 1
+
frame_dig -1
load 1
cover 3
callsub rtl_13
swap
store 1
b rtl_13_l5
rtl_13_l4:
frame_dig -3
rtl_13_l5:
retsub

// hello_caster
hellocaster_14:
proto 0 0
bytec_0 // ""
dup
txna ApplicationArgs 1
frame_bury 1
frame_dig 1
callsub hello_0
frame_bury 0
bytec 7 // 0x151f7c75
frame_dig 0
concat
log
retsub

// start_game_caster
startgamecaster_15:
proto 0 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
txna ApplicationArgs 1
frame_bury 2
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 1
frame_dig 2
callsub startgame_3
frame_bury 0
bytec 7 // 0x151f7c75
frame_dig 0
concat
log
retsub

// join_game_caster
joingamecaster_16:
proto 0 0
bytec_0 // ""
intc_0 // 0
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 1
callsub joingame_4
frame_bury 0
bytec 7 // 0x151f7c75
frame_dig 0
concat
log
retsub

// resolve_game_caster
resolvegamecaster_17:
proto 0 0
bytec_0 // ""
intc_0 // 0
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 1
frame_dig 1
callsub resolvegame_5
frame_bury 0
bytec 7 // 0x151f7c75
frame_dig 0
concat
log
retsub

// check_wins_caster
checkwinscaster_18:
proto 0 0
intc_0 // 0
callsub checkwins_6
frame_bury 0
bytec 7 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub